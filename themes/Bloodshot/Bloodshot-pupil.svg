<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   version="1.1"
   id="svg2"
   width="826.66669"
   height="1093.3333"
   viewBox="0 0 826.66669 1093.3333"
   sodipodi:docname="Bloodshot-pupil.svg"
   inkscape:version="1.2.2 (b0a8486541, 2022-12-01)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs
     id="defs6">
    <linearGradient
       inkscape:collect="always"
       id="linearGradient11049">
      <stop
         style="stop-color:#e80d0d;stop-opacity:0.84071732;"
         offset="0"
         id="stop11045" />
      <stop
         style="stop-color:#760c0c;stop-opacity:0.86894178;"
         offset="1"
         id="stop11047" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       id="linearGradient932">
      <stop
         style="stop-color:#9e0000;stop-opacity:1;"
         offset="0"
         id="stop928" />
      <stop
         style="stop-color:#000000;stop-opacity:1;"
         offset="0.68102133"
         id="stop930" />
    </linearGradient>
    <radialGradient
       inkscape:collect="always"
       xlink:href="#linearGradient932"
       id="radialGradient934"
       cx="411.78134"
       cy="530.47388"
       fx="411.78134"
       fy="530.47388"
       r="80.26502"
       gradientTransform="matrix(1,0,0,1.0257092,0,-13.638081)"
       gradientUnits="userSpaceOnUse" />
    <radialGradient
       inkscape:collect="always"
       xlink:href="#linearGradient11049"
       id="radialGradient11051"
       cx="413.05644"
       cy="546.30266"
       fx="413.05644"
       fy="546.30266"
       r="309.48658"
       gradientTransform="matrix(1,0,0,1.4196483,0,-229.25498)"
       gradientUnits="userSpaceOnUse" />
  </defs>
  <sodipodi:namedview
     id="namedview4"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     showgrid="false"
     inkscape:zoom="0.93932934"
     inkscape:cx="131.47678"
     inkscape:cy="551.98957"
     inkscape:window-width="1257"
     inkscape:window-height="1230"
     inkscape:window-x="1262"
     inkscape:window-y="88"
     inkscape:window-maximized="0"
     inkscape:current-layer="g8" />
  <g
     inkscape:groupmode="layer"
     inkscape:label="Image"
     id="g8">
    <path
       style="display:inline;fill:url(#radialGradient11051);fill-opacity:1;stroke-width:1.33333"
       d="m 382.04349,985.36985 c -5.61581,-0.59625 -7.06676,-1.36361 -9.53959,-5.04516 -6.90009,-10.27284 3.08582,-16.28443 31.55636,-18.99713 15.98105,-1.52268 20.21065,-0.0953 24.29879,8.20016 3.05915,6.20745 2.08235,8.35742 -5.47818,12.05786 -5.11886,2.50539 -8.44686,3.04783 -18.88086,3.07747 -6.96667,0.0197 -13.26667,0.34513 -14,0.72299 -0.73333,0.37786 -4.31376,0.37057 -7.95652,-0.0161 z m 78.39124,-27.3488 c -5.93642,-4.15804 -6.67713,-18.08468 -3.33412,-62.68774 l 0.8994,-12 5.19407,-0.42539 c 4.65712,-0.38141 5.87403,0.23885 11.77128,6 3.61745,3.53396 7.43413,8.05333 8.48149,10.04305 1.25151,2.37755 3.63702,4.08426 6.95891,4.97875 5.43396,1.46321 10.74648,6.31271 13.95303,12.73692 5.6881,11.39597 6.20618,31.26544 0.93948,36.03174 -6.7818,6.13744 -38.35267,9.88306 -44.86354,5.32267 z m 73.02747,-25.78032 c -0.84317,-1.57547 -0.83026,-11.74188 0.0368,-29 0.73432,-14.61574 0.95016,-29.75708 0.47963,-33.6474 -1.04496,-8.63982 -6.13195,-15.0849 -13.6946,-17.35073 -5.08795,-1.52439 -16.28402,-11.32495 -16.28402,-14.25433 0,-3.4537 5.49146,-7.32155 10.38528,-7.3148 6.12626,0.008 11.85548,3.47864 24.00647,14.54068 16.04015,14.60265 18.43451,22.4119 19.21164,62.65916 l 0.39662,20.54 -6,3.0891 c -7.49378,3.85817 -16.67248,4.22373 -18.53782,0.73832 z M 322.66594,929.6962 c -2.50741,-3.18767 -2.77085,-4.79405 -2.13184,-13 0.401,-5.14959 0.76603,-10.86289 0.81118,-12.69623 0.0452,-1.83333 0.59234,-4.53333 1.216,-6 0.62366,-1.46666 1.6525,-5.06666 2.28633,-8 0.99944,-4.62541 2.07147,-5.82586 8.07652,-9.04402 3.99032,-2.13844 7.31529,-4.96316 7.84733,-6.66667 0.50778,-1.62579 3.86423,-6.3632 7.4588,-10.52759 7.40683,-8.58097 12.02163,-10.41226 18.19454,-7.22013 4.97534,2.57285 6.91228,8.00092 6.89552,19.32404 -0.0175,11.84159 -4.07454,20.46757 -13.27523,28.22571 -3.81899,3.22021 -9.93299,9.96497 -13.58668,14.98833 -4.72193,6.49207 -8.25513,9.86529 -12.2174,11.66424 -7.32243,3.32453 -8.19824,3.24525 -11.57507,-1.04768 z m -75.4868,-24.94207 c -2.68573,-1.16896 -4.68885,-3.34181 -5.66667,-6.14677 -1.87122,-5.36779 -1.97825,-15.49547 -0.17553,-16.60961 0.89371,-0.55234 0.89371,-1.65448 0,-3.32438 -0.73531,-1.37394 -1.33693,-3.67334 -1.33693,-5.10976 0,-1.43641 -0.94138,-2.9729 -2.09194,-3.41442 -1.26069,-0.48378 -1.80208,-1.73252 -1.36246,-3.14264 1.18804,-3.81082 -2.60951,-12.98716 -5.43899,-13.14275 -6.14884,-0.33811 -19.10661,-11.04664 -19.10661,-15.79004 0,-3.00757 -11.78294,-13.33253 -16.39154,-14.36331 -2.35132,-0.5259 -9.51838,-2.09684 -15.92681,-3.49096 -6.40842,-1.39413 -12.51842,-3.25411 -13.57778,-4.1333 -2.26376,-1.87876 -4.7718,-12.46008 -3.81792,-16.10771 0.36842,-1.40884 -0.55912,-4.08602 -2.08985,-6.03204 -1.96165,-2.49382 -2.52923,-4.61422 -1.97579,-7.38138 1.26452,-6.32263 -1.63942,-10.86639 -9.30866,-14.56508 -5.84166,-2.8173 -7.4726,-4.46862 -10.53508,-10.66667 -1.99288,-4.03333 -4.23835,-11.23333 -4.98992,-16 -3.73934,-23.7156 0.69441,-68.69445 7.51925,-76.2801 1.33508,-1.48394 5.69825,-4.14839 9.69592,-5.92102 4.59073,-2.03558 9.76727,-5.90789 14.05111,-10.51092 7.45761,-8.01326 10.95134,-9.01701 15.51184,-4.45652 2.50199,2.50199 2.75709,3.93699 2.19249,12.33334 -0.53612,7.97281 -1.45953,10.89132 -5.73823,18.13596 -6.89698,11.6779 -10.34672,14.98574 -14.53288,13.93508 -4.298,-1.07872 -4.83384,1.07993 -4.98878,20.09751 -0.31346,38.47504 1.03501,52.91064 5.6298,60.26808 1.38858,2.22348 2.39425,2.5729 4.78694,1.66319 4.45639,-1.69432 25.86779,-0.50385 31.22933,1.73633 2.55585,1.06791 8.4925,6.29214 13.25656,11.66574 4.7453,5.35245 10.68025,10.58929 13.18878,11.63741 4.12739,1.72453 4.87099,1.67392 7.82238,-0.53252 3.7335,-2.79116 5.83989,-8.46552 8.98774,-24.21207 2.02579,-10.13365 2.0355,-11.3115 0.1108,-13.43832 -1.1603,-1.28213 -2.11189,-3.1839 -2.11464,-4.22616 -0.009,-3.56256 -5.00844,-10.1058 -8.83732,-11.56706 -2.1034,-0.80275 -5.96926,-1.81242 -8.59081,-2.24368 -2.78547,-0.45824 -6.31743,-2.40302 -8.49827,-4.67932 -3.22781,-3.36911 -3.60626,-4.56446 -2.80216,-8.85068 0.51942,-2.76876 2.6515,-6.67734 4.8316,-8.85746 4.08714,-4.08713 4.76899,-6.29644 2.60967,-8.45576 -0.71076,-0.71076 -1.46076,-8.88618 -1.66667,-18.16762 -0.33766,-15.22047 -0.1088,-17.23116 2.33354,-20.50359 1.48936,-1.99552 4.05998,-4.12838 5.71252,-4.73969 2.61274,-0.96652 3.52457,-0.29156 6.9916,5.17536 4.10382,6.47105 6.3128,12.79507 7.91085,22.64772 l 0.91693,5.65324 -7.08469,-0.83267 c -6.6932,-0.78665 -7.15548,-0.64646 -8.36584,2.537 -3.12531,8.22019 3.29308,13.58663 17.87737,14.94736 14.46392,1.34949 16.43344,1.96931 19.37238,6.09667 1.50816,2.11801 3.09386,7.02213 3.52381,10.89805 1.00247,9.03729 5.49031,13.66792 12.10252,12.48756 2.38404,-0.42557 6.58463,-1.15001 9.33463,-1.60985 5.93933,-0.99316 11.84804,-4.86778 13.011,-8.5319 0.45945,-1.44761 1.99493,-2.63202 3.41219,-2.63202 1.67422,0 2.57681,-0.9194 2.57681,-2.62483 0,-3.80088 3.27964,-2.13452 10.92448,5.55067 5.85035,5.88121 6.40841,6.99306 6.40387,12.75841 -0.007,8.36821 -3.32818,13.52345 -12.91016,20.03727 -9.70828,6.59965 -32.10469,26.88952 -41.61938,37.7048 -3.96065,4.50204 -11.4712,11.34333 -16.69009,15.20289 -12.28896,9.0881 -13.5437,10.62398 -11.80208,14.4464 2.24242,4.92158 8.43877,11.5881 10.81188,11.63228 3.16973,0.0589 10.54568,10.42828 12.87153,18.09509 2.67895,8.83075 2.57552,22.2688 -0.21667,28.15292 -2.06225,4.34587 -8.66949,9.76348 -11.77338,9.65359 -0.73334,-0.026 -3.20272,-0.86087 -5.48754,-1.85534 z M 176.16276,804.43331 c -1.16206,-1.99836 -1.42225,-2.05596 -1.45554,-0.32223 -0.0431,2.24544 1.35892,4.2672 2.30389,3.32223 0.31167,-0.31167 -0.0701,-1.66167 -0.84835,-3 z m 255.96473,17.46933 c -2.2637,-1.90478 -4.68016,-5.67018 -5.43293,-8.46581 -1.18473,-4.39973 -2.44619,-5.58859 -9.99595,-9.42064 -8.01848,-4.06997 -9.67348,-4.40488 -23.00269,-4.6548 -18.61147,-0.34897 -17.33175,-0.0332 -20.37719,-5.02808 -3.09239,-5.07188 -3.38316,-11.15627 -0.82619,-17.28809 3.8157,-9.1504 4.5684,-13.00788 3.4799,-17.83414 -1.33795,-5.9323 -1.24832,-5.85364 -11.97243,-10.50836 -4.76667,-2.06893 -10.5104,-5.32342 -12.76387,-7.23222 -2.25345,-1.90879 -6.8627,-5.37943 -10.24276,-7.71254 -8.69557,-6.00218 -10.49,-9.15804 -8.96002,-15.75798 0.68,-2.93334 1.25068,-9.46372 1.26817,-14.51197 0.0175,-5.04826 0.74811,-11.56943 1.62359,-14.4915 1.34672,-4.49494 2.52698,-5.70034 7.66666,-7.82989 10.21924,-4.23419 13.76238,-6.55553 22.0749,-14.46281 10.44705,-9.93774 15.1253,-13.3705 18.22165,-13.3705 2.95373,0 3.01505,0.15935 5.25904,13.66667 1.49915,9.02387 2.06788,10.33333 4.48799,10.33333 4.10278,0 8.39844,3.51907 11.3443,9.29346 2.27788,4.46501 2.35062,5.217 0.57068,5.90002 -3.2743,1.25647 -14.28497,-1.77232 -17.53186,-4.82262 -1.64044,-1.54111 -4.8225,-3.00343 -7.07124,-3.24962 -3.48739,-0.38178 -5.33692,0.77735 -12.57718,7.88224 -7.39552,7.25728 -8.60872,9.1521 -9.42188,14.71558 -0.75121,5.13969 -0.47168,6.89582 1.43256,8.99999 3.7104,4.09994 8.45351,3.285 13.42866,-2.3072 l 4.37842,-4.92149 11.07276,6.72413 c 7.48698,4.5466 11.79476,8.12606 13.30226,11.05319 2.10925,4.09556 2.09126,4.65153 -0.33334,10.30789 -2.63032,6.13628 -3.3358,11.12387 -1.56282,11.0487 0.55,-0.0233 2.16468,-0.92334 3.58817,-2 1.42349,-1.07668 3.58051,-1.9576 4.79335,-1.9576 1.21285,0 3.21069,-1.11107 4.43964,-2.46906 1.93725,-2.14064 2.15356,-5.02254 1.62623,-21.66666 -0.33452,-10.55868 -1.21694,-21.18868 -1.96091,-23.62219 l -1.35267,-4.42458 4.26643,0.9147 c 2.34653,0.5031 4.77765,1.2174 5.40247,1.58735 2.92741,1.73329 5.0797,11.39072 6.2622,28.09865 1.44618,20.43392 1.39046,20.32685 12.25722,23.55393 10.05215,2.98516 13.98167,5.94771 16.90616,12.74586 3.27815,7.62028 2.5048,15.6401 -1.65661,17.1795 -2.15704,0.79795 -2.76733,2.33664 -2.99543,7.55231 -0.15754,3.6026 0.35496,7.75019 1.1389,9.21685 2.23888,4.18868 2.3208,23.3723 0.11413,26.73999 -4.28759,6.54369 -14.12541,7.74924 -20.36853,2.49601 z m -45.46081,-61.1573 c 0,-0.32339 -0.6,-0.9588 -1.33334,-1.41203 -0.73333,-0.45323 -1.33333,-0.18864 -1.33333,0.58797 0,0.77662 0.6,1.41203 1.33333,1.41203 0.73334,0 1.33334,-0.26459 1.33334,-0.58797 z m -0.52274,-80.41203 c 0.9742,-1.28333 1.79034,-2.78333 1.81367,-3.33333 0.0783,-1.84713 -4.94609,-1.02207 -6.7086,1.10163 -1.44551,1.74172 -1.41639,2.30904 0.17007,3.3129 2.57077,1.62672 2.68997,1.59944 4.72486,-1.0812 z m 227.78804,140.37616 c -2.39528,-5.73272 -2.4067,-12.34829 -0.0287,-16.64232 1.98099,-3.57711 1.58947,-5.58064 -2.14437,-10.97356 -1.54316,-2.22885 -1.96315,-3.88869 -1.11636,-4.41203 4.20469,-2.59865 -2.2818,-12.14277 -9.19188,-13.52478 -2.67282,-0.53456 -5.11811,-2.5379 -7.51052,-6.1531 -8.1775,-12.35702 -13.60994,-16.78145 -25.10427,-20.44609 -8.31316,-2.65041 -12.42377,-3.27488 -17.65649,-2.68227 -6.29586,0.71302 -7.28748,0.41598 -12.88871,-3.86088 -4.03471,-3.08073 -6.60607,-6.3168 -7.67355,-9.65722 -2.09347,-6.55104 -7.20551,-11.91678 -13.17039,-13.82399 -6.92533,-2.21431 -10.33933,-5.92111 -12.87336,-13.97742 -2.2269,-7.07995 -2.28065,-7.12952 -10.80474,-9.96616 -7.2657,-2.41787 -9.09748,-3.69156 -12.0618,-8.38691 -6.88706,-10.90877 -12.8371,-25.49751 -13.94967,-34.20276 -2.35284,-18.40987 -2.72688,-25.56361 -1.40569,-26.8848 2.21109,-2.21109 8.87304,2.15412 20.56452,13.47477 8.5664,8.2947 10.59806,10.97904 9.79229,12.93811 -0.5592,1.35956 -1.56609,4.79204 -2.23756,7.62775 -1.56011,6.5886 1.17377,9.29714 8.19595,8.11997 2.56666,-0.43027 7.36666,-1.08932 10.66666,-1.46456 7.66382,-0.87145 12.94583,-2.87821 13.86235,-5.26665 0.39635,-1.03286 1.42331,-1.87792 2.28215,-1.87792 2.04676,0 5.09267,-4.07279 5.14644,-6.88148 0.0537,-2.8093 -7.05076,-8.8523 -11.72703,-9.97478 -6.14132,-1.47416 -13.6888,-5.83821 -18.88316,-10.91849 -13.01276,-12.72697 -21.28184,-17.38661 -31.05592,-17.50007 -3.21,-0.0372 -5.32069,-0.78517 -5.80932,-2.05852 -0.93128,-2.42686 -3.99632,-2.63309 -4.95397,-0.33333 -0.50502,1.2128 -1.21072,1.03124 -2.59143,-0.66667 -2.52405,-3.10393 -10.34812,-3.02298 -16.65656,0.17234 -5.97924,3.02858 -24.13115,5.62869 -31.94038,4.5752 -5.20409,-0.70206 -6.00986,-0.38458 -10,3.93998 -4.55786,4.93984 -11.6846,7.69703 -16.56621,6.4091 -1.59117,-0.4198 -5.37349,-4.48734 -8.40515,-9.03896 -3.03708,-4.55975 -9.31574,-11.30232 -13.9831,-15.01626 -9.80436,-7.80155 -15.00114,-13.46651 -18.63902,-20.31825 -2.32429,-4.37766 -2.76172,-4.64482 -4.308,-2.6311 -1.42918,1.86124 -1.92669,1.9288 -2.93392,0.39845 -0.96062,-1.45952 -1.3998,-1.254 -2.1114,0.98807 -0.49417,1.557 -0.53982,3.41125 -0.10146,4.12056 0.43837,0.7093 -4.36366,6.86468 -10.67119,13.6786 -12.60381,13.6157 -19.29084,23.98077 -19.28005,29.88458 0.007,3.78324 0.74949,5.20347 8.65965,16.56243 l 4,5.74398 v 33.64244 33.64244 l -4.05567,5.78987 c -4.90868,7.00762 -8.79793,7.96657 -13.44858,3.3159 -2.8583,-2.85828 -3.51852,-5.15981 -4.52381,-15.76971 -1.57533,-16.62626 -4.25632,-27.53059 -8.32442,-33.85783 -1.8501,-2.87751 -4.40299,-8.46349 -5.67311,-12.41332 -1.27011,-3.94981 -4.33395,-9.42255 -6.80852,-12.1616 -2.47459,-2.73905 -4.49924,-5.41517 -4.49924,-5.94693 0,-0.53175 3.19336,-4.65903 7.09637,-9.17174 10.16643,-11.75454 13.0493,-16.28018 16.30408,-25.59482 2.44631,-7.0009 4.72039,-10.09621 14.99474,-20.40977 14.77653,-14.83292 23.42065,-20.75426 27.01801,-18.50767 4.15466,2.59463 4.33587,0.24285 0.81738,-10.60808 -4.6642,-14.38423 -5.30156,-18.18704 -5.08071,-30.31381 0.25349,-13.91898 4.39112,-30.92575 10.73019,-44.10408 7.86684,-16.35439 8.32849,-17.78565 6.71132,-20.80735 -1.08399,-2.02545 -0.7693,-4.53776 1.3272,-10.59577 3.4285,-9.90695 3.45818,-13.54095 0.13514,-16.54825 -4.9475,-4.47744 -12.63498,-0.116 -20.459,11.60713 -2.57348,3.856 -6.52133,8.76 -8.77301,10.89777 -3.90129,3.70394 -4.34641,3.81123 -9.45784,2.27982 -5.27825,-1.5814 -5.36372,-1.7073 -5.35508,-7.88687 0.0107,-7.21416 2.52021,-11.71497 10.49636,-18.82063 4.72984,-4.21365 5.47241,-5.67828 6.14785,-12.12585 0.89059,-8.50133 0.0155,-10.34895 -5.38594,-11.37047 -3.09103,-0.58457 -6.26888,0.62507 -14.83428,5.6466 -5.99531,3.51479 -12.77025,7.42694 -15.05542,8.69366 -5.32196,2.95008 -8.04403,9.54421 -8.04403,19.48641 0,9.61291 2.5779,17.28381 8.88686,26.44413 4.71229,6.84204 5.2135,11.09967 1.30668,11.09967 -2.4557,0 -21.80252,-6.45717 -26.46066,-8.83148 -1.98025,-1.00935 -5.01278,-1.83519 -6.73896,-1.83519 -4.70301,0 -15.00652,-7.11796 -19.69016,-13.60253 -6.58752,-9.12052 -33.01778,-35.7308 -35.48909,-35.7308 -1.23588,0 -4.80243,-1.49755 -7.92565,-3.32789 -7.89866,-4.62891 -9.15738,-9.10332 -8.09888,-28.78923 0.62526,-11.62848 0.41968,-15.91388 -0.80931,-16.87032 -0.90612,-0.70517 -5.16661,-1.96526 -9.46778,-2.8002 -6.02845,-1.17024 -16.07322,-5.50737 -16.95565,-7.3211 -0.0601,-0.12347 -0.36201,-3.82459 -0.67093,-8.22459 -0.64155,-9.13783 -3.84067,-13.23093 -9.2751,-11.86699 -2.38957,0.59975 -4.42029,-0.4355 -8.7181,-4.44446 -5.13015,-4.78535 -5.4939,-5.5552 -4.3111,-9.12411 1.45274,-4.38336 8.64104,-9.11176 17.28276,-11.36847 l 5.5316,-1.44452 2.14348,-12.20906 c 1.17891,-6.71498 2.67416,-17.16862 3.32278,-23.23031 1.1743,-10.97459 2.84646,-14.97874 6.25524,-14.97874 0.98532,0 3.76185,-0.94191 6.17006,-2.09314 3.46451,-1.65618 5.39577,-4.28836 9.2511,-12.60874 5.39799,-11.64963 10.68777,-16.30523 17.79415,-15.66083 6.43848,0.58383 8.70741,7.01849 10.13612,28.74584 1.56877,23.85768 1.58578,112.17358 0.0235,121.61686 -1.78445,10.78565 1.21628,14.64525 11.41947,14.68796 6.94555,0.0291 13.17652,5.75051 18.56611,17.04784 l 4.23817,8.88384 10.30176,1.42283 c 9.35104,1.29153 10.59704,1.19056 13.50165,-1.09422 3.90758,-3.07369 7.14663,-9.07666 7.14663,-13.24492 0,-5.26332 7.53409,-12.77254 17.80173,-17.74296 10.38881,-5.02906 11.34069,-5.71213 18.10138,-12.98952 3.80056,-4.09102 4.62069,-6.05231 4.87227,-11.65162 0.22064,-4.91096 1.2573,-7.9844 3.83141,-11.35924 1.94091,-2.54465 4.24839,-4.61747 5.12773,-4.60624 4.01002,0.0512 5.47675,2.7154 5.99444,10.88831 0.5199,8.20764 0.3904,8.60434 -5.02757,15.40343 -4.10673,5.15363 -5.33097,7.7042 -4.68093,9.7523 1.25318,3.94842 15.92654,18.60221 18.62706,18.60221 2.69566,0 7.24567,-5.10356 7.30812,-8.19724 0.0244,-1.20848 -1.40328,-4.74585 -3.17261,-7.86083 -1.76935,-3.11497 -2.85863,-6.62621 -2.42063,-7.80276 0.438,-1.17654 3.71031,-6.63917 7.27178,-12.13917 3.56148,-5.5 7.39184,-13.3 8.5119,-17.33333 2.90368,-10.45603 2.98676,-10.66667 4.20719,-10.66667 5.44937,0 35.75387,26.87792 38.91844,34.51788 2.86415,6.91467 1.03409,10.26001 -7.32323,13.38688 -4.06001,1.51905 -8.8133,2.76191 -10.56286,2.76191 -4.33094,0 -10.44906,5.42488 -13.06326,11.58308 -1.1869,2.79597 -4.59498,10.70934 -7.57352,17.58528 -5.75304,13.28089 -6.88246,21.55514 -3.4155,25.02212 1.1,1.1 2,3.75713 2,5.90476 0,2.14761 0.25393,3.90476 0.56429,3.90476 0.31035,0 5.03359,-2.41071 10.49607,-5.35714 11.54761,-6.2287 11.56718,-6.27749 11.59162,-28.88096 0.0181,-16.82772 0.59559,-17.61437 12.79264,-17.42941 l 8.78674,0.1332 6.34308,-6.89953 c 10.7526,-11.6959 14.49236,-9.08516 14.61843,10.20512 0.0389,5.95089 0.44386,12.30661 0.89996,14.12381 1.38413,5.51487 -4.24722,9.96647 -12.52664,9.90233 -9.89367,-0.0767 -14.43594,1.29643 -16.94213,5.12134 -3.01481,4.60118 -1.08454,5.70172 10.0426,5.72574 10.30131,0.0223 30.23833,2.43568 34.00001,4.11582 1.46666,0.65506 4.46666,1.17842 6.66666,1.16302 2.2,-0.0155 5.04116,0.14552 6.3137,0.35763 1.47064,0.24513 4.14912,-2.04352 7.3509,-6.28101 5.46574,-7.23382 12.26987,-11.33791 19.78566,-11.93424 3.79925,-0.30146 6.26716,-1.90316 12.03564,-7.81131 3.99102,-4.08765 8.48278,-7.82133 9.98168,-8.29707 1.92729,-0.61169 2.44234,-1.51292 1.75901,-3.07784 -3.39419,-7.77294 -0.49116,-20.21284 4.71692,-20.21284 3.29315,0 18.50417,13.5217 21.54963,19.15634 1.58035,2.92392 2.08113,6.94085 1.86649,14.97165 -0.26704,9.99219 -0.67226,11.49359 -4.52277,16.75712 -8.43052,11.52432 -19.8622,21.77049 -30.77924,27.58733 -5.89838,3.14279 -10.72432,6.52932 -10.72432,7.52563 0,2.66376 3.46858,5.68772 10.76498,9.38509 8.65348,4.38505 15.00567,10.14836 20.78976,18.86245 3.05584,4.60383 5.57262,7.06672 6.95108,6.80228 1.18847,-0.22798 3.73393,-3.32408 5.65658,-6.88021 5.56736,-10.29735 9.51248,-11.53369 12.67223,-3.97135 1.18302,2.83138 1.90604,7.9839 1.73064,12.33334 -0.59418,14.73446 -0.17944,16.4505 5.49714,22.74522 6.38432,7.07954 7.2408,9.88882 6.0498,19.84367 -2.43774,20.37545 -2.46198,29.07467 -0.0949,34.06284 1.88033,3.9625 2.1522,6.84493 1.43253,15.18797 -0.48853,5.66351 -1.15298,21.39729 -1.47657,34.96396 -0.32357,13.56667 -1.27127,27.56459 -2.10597,31.10648 -1.68834,7.16407 -5.83862,10.96439 -19.01363,17.41031 -10.32396,5.05105 -10.92635,6.09378 -7.71474,13.35418 1.79114,4.04917 3.68434,6.26151 5.76414,6.73579 10.43061,2.37865 16.34323,3.3062 26.43031,4.1463 6.23333,0.51914 12.6724,1.44307 14.30902,2.05318 2.36718,0.88242 3.2874,0.50441 4.49995,-1.84848 0.83835,-1.62678 2.75183,-4.30559 4.2522,-5.95294 2.41916,-2.65614 2.52528,-3.37384 0.93757,-6.34051 -1.4533,-2.71552 -1.49173,-4.96611 -0.20408,-11.95444 0.87246,-4.73502 1.208,-10.97482 0.74564,-13.86623 -0.61705,-3.85888 -0.19204,-6.35511 1.59802,-9.38541 4.83872,-8.1913 9.82522,-6.77234 24.27786,6.90854 5.63776,5.33672 13.85048,12.51807 18.25048,15.95856 4.4,3.4405 10.05016,8.83167 12.55591,11.9804 2.50576,3.14872 6.70576,7.25864 9.33334,9.13317 10.07649,7.18859 15.96282,24.08248 16.20937,46.5212 0.14175,12.9016 -0.1782,14.95228 -3.29149,21.09607 -4.38148,8.64643 -32.88094,37.43541 -38.71542,39.10872 -8.24981,2.36601 -11.39753,1.55993 -13.49308,-3.4554 z m 22.06804,-59.9956 c 0,-6.93364 -2.85678,-10.98528 -9.86322,-13.9886 -7.33544,-3.14433 -15.41684,-11.15243 -18.94976,-18.77787 -2.87285,-6.20076 -8.66092,-11.94742 -12.0335,-11.94742 -1.00111,0 -1.82019,0.6 -1.82019,1.33333 0,0.73333 -1.16597,1.33333 -2.59107,1.33333 -2.7234,0 -6.74226,4.6314 -6.74226,7.76988 0,1.01376 6.45,8.32034 14.33333,16.23683 7.88333,7.91649 17.76247,18.1858 21.95361,22.82068 l 7.62028,8.42707 4.04639,-3.87668 c 3.21496,-3.08014 4.04639,-4.99731 4.04639,-9.33055 z m -26.66667,-17.825 c 0,-1.87867 1.50185,-2.74053 3.46369,-1.98771 2.78259,1.06779 2.2602,3.09882 -0.79702,3.09882 -1.46667,0 -2.66667,-0.5 -2.66667,-1.11111 z M 500.00001,581.47949 c 3.09063,-0.85427 3.38188,-1.64551 4,-10.86709 l 0.66667,-9.94575 9.30473,-1.02743 c 9.16338,-1.01181 18.06579,-4.41748 19.01851,-7.27562 1.46182,-4.38546 -10.89161,-9.44851 -16.32324,-6.69008 -3.83164,1.94589 -22.35467,20.7194 -26.51151,26.87002 -3.30814,4.89486 -3.38673,5.35892 -1.29824,7.66667 2.2878,2.52799 5.3339,2.87496 11.14308,1.26928 z M 477.33335,475.33332 c -0.94234,-1.13544 -2.01334,-1.76444 -2.38,-1.39777 -0.36667,0.36666 0.1044,1.59566 1.04666,2.7311 0.94234,1.13544 2.01334,1.76444 2.38,1.39778 0.36667,-0.36667 -0.1044,-1.59567 -1.04666,-2.73111 z m 24.18418,-21.66667 c 1.06196,-1.28333 2.80495,-4.09209 3.87332,-6.24169 1.06838,-2.1496 4.52892,-6.54004 7.69012,-9.75653 6.73852,-6.8564 7.20683,-11.4053 1.24479,-12.09107 -2.58557,-0.2974 -3.94104,0.29519 -4.57467,2 -0.49524,1.33244 -3.79182,5.20325 -7.32576,8.6018 -3.53392,3.39855 -6.42532,6.78436 -6.42532,7.52401 0,0.73967 -0.9,1.6902 -2,2.11232 -1.1,0.42211 -1.95938,2.1363 -1.90976,3.80932 l 0.0903,3.04184 1.44684,-3 c 2.1144,-4.38413 3.70601,-3.66834 3.70601,1.66667 0,5.16032 1.26235,5.86428 4.18419,2.33333 z m -42.37828,277.48594 c -4.91401,-1.09063 -7.63782,-5.38657 -7.7253,-12.18419 -0.0797,-6.19778 -0.009,-6.30162 6.78772,-9.96323 6.3876,-3.4412 7.34196,-3.59862 13.63548,-2.2489 7.20333,1.54484 13.4962,7.11673 13.4962,11.94993 0,4.31583 -2.82311,8.93686 -6.48036,10.60743 -3.88267,1.77353 -15.23647,2.83265 -19.71374,1.83896 z m -58.06051,-78.6624 c -4.50233,-2.37617 -6.05138,-6.75565 -3.34633,-9.46072 1.10357,-1.10356 4.49712,-2.46192 7.54121,-3.01857 6.64844,-1.21575 9.39306,0.81131 9.39306,6.93733 0,6.98426 -6.12311,9.48162 -13.58794,5.54196 z m 275.30295,-39.31654 c -4.46126,-1.27524 -10.02024,-7.48323 -11.7336,-13.10345 -1.14811,-3.76604 -13.61458,-17.40355 -15.90913,-17.40355 -2.04464,0 -7.40561,11.17367 -7.40561,15.43521 0,5.78259 -3.54652,10.76047 -9.30909,13.06619 -3.97843,1.59185 -9.80152,2.16526 -21.98848,2.16526 -22.73428,0 -25.50072,-1.58577 -24.46188,-14.02199 0.4841,-5.79538 3.63929,-8.17438 17.75945,-13.39062 7.43353,-2.74608 8.05649,-3.29968 8.79773,-7.8183 0.59938,-3.65372 0.27034,-5.15811 -1.32322,-6.04991 -1.16654,-0.65283 -2.12552,-2.27733 -2.13107,-3.61001 -0.007,-1.5132 -2.37043,-3.6995 -6.29589,-5.82236 -7.79295,-4.21436 -11.26006,-7.40544 -21.18774,-19.50095 -6.7371,-8.20823 -8.59537,-9.67573 -13.24742,-10.46169 -4.38056,-0.7401 -6.09231,-1.94359 -8.988,-6.31927 -3.38918,-5.12139 -3.55851,-6.1468 -3.22635,-19.53831 0.19281,-7.77329 0.91371,-16.23325 1.60199,-18.79991 0.68828,-2.56667 1.19089,-8.56667 1.1169,-13.33334 -0.30693,-19.7751 10.85782,-29.7941 22.15142,-19.8782 5.29409,4.64828 7.15334,10.04772 7.53358,21.8782 0.66432,20.66945 2.93612,26.53728 10.86547,28.06433 4.68776,0.90279 12.25131,9.45448 16.94711,19.16119 5.16149,10.66935 5.33132,10.73565 27.55557,10.7598 14.69903,0.016 16.47963,-0.77431 17.30358,-7.67988 0.76144,-6.38175 4.36836,-62.67252 5.19748,-81.11358 0.57165,-12.7146 1.74872,-16.32908 6.04034,-18.54836 9.098,-4.70476 16.81663,-0.37903 25.05139,14.03948 2.07364,3.63082 5.79287,7.96453 8.26495,9.63045 8.07102,5.43908 10.73793,12.86019 16.14246,44.91929 2.00552,11.89647 1.02736,24.53761 -2.23256,28.85225 -1.43241,1.89587 -7.40438,6.05023 -13.27105,9.23192 l -10.66667,5.7849 0.32367,31.11577 c 0.34619,33.27954 0.008,35.40946 -6.32367,39.87736 -4.5767,3.22929 -7.9167,3.85133 -12.95166,2.41208 z m -57.71501,-39.79343 c 0,-1.71288 -5.3217,-4.50297 -6.44542,-3.37925 -0.48604,0.48604 0.28002,1.73465 1.70236,2.77469 3.01078,2.20154 4.74306,2.42235 4.74306,0.60456 z M 112.4205,612.08846 c -5.66893,-2.47437 -6.35298,-5.94389 -6.06369,-30.75514 0.30717,-26.34458 1.96765,-43.88578 4.29018,-45.32118 0.86266,-0.53314 4.82217,-1.6975 8.79892,-2.58746 4.84367,-1.08398 7.71667,-2.52663 8.70341,-4.37036 0.81013,-1.51374 2.06583,-12.04904 2.79044,-23.41178 1.48462,-23.28031 2.22015,-21.31082 -9.60642,-25.72246 -4.03334,-1.50455 -9.68012,-4.89884 -12.54841,-7.54287 l -5.21507,-4.8073 4.0668,-3.6337 c 7.10238,-6.34596 16.5019,-8.87373 38.69945,-10.40728 15.19789,-1.04996 22.15989,-1.00445 27.81548,0.18183 7.96106,1.66985 8.95502,2.66317 15.72778,15.71763 1.52946,2.94806 4.68741,5.93784 8.29102,7.84956 7.2346,3.83794 13.18791,12.54165 15.19656,22.21729 1.80036,8.6723 0.49855,24.20745 -2.29544,27.39254 -3.18673,3.63283 -15.93505,8.20616 -20.3908,7.31502 -3.8296,-0.76592 -3.94164,-0.64191 -3.76793,4.17056 0.0984,2.72797 -0.26821,7.65996 -0.81485,10.95996 -0.8586,5.18341 -0.58471,6.43358 2.01249,9.18581 2.92164,3.09604 3.44473,3.16563 18.56084,2.46917 8.55496,-0.39414 19.5828,-0.39328 24.50632,10e-4 l 8.95184,0.71856 -0.82179,3.74154 c -0.89557,4.07754 -1.50892,10.5623 -2.62057,27.70638 -0.39787,6.1362 -1.05064,11.68619 -1.45059,12.33333 -0.39994,0.64713 -3.69177,1.1766 -7.31516,1.1766 -6.52814,0 -7.60649,-0.95059 -6.67373,-5.88305 0.55793,-2.9504 -3.11424,-8.67114 -6.36196,-9.91103 -1.95375,-0.74589 -7.65031,-1.75027 -12.659,-2.23193 -14.26027,-1.37136 -19.60107,2.06618 -17.57092,11.30936 0.75284,3.42766 0.32877,4.16203 -3.56731,6.17774 -2.43194,1.2582 -7.42172,3.09893 -11.08839,4.09052 -8.17502,2.21079 -53.43148,3.68073 -57.5795,1.8702 z m 71.48872,-82.62764 c 1.5166,-2.12986 2.75745,-5.94114 2.75745,-8.46949 0,-5.64295 -5.1171,-13.65801 -8.71977,-13.65801 -1.43746,0 -2.98315,-0.50531 -3.43487,-1.1229 C 172.4295,503.36318 160,516.85637 160,521.96436 c 0,4.6362 4.81108,9.79845 9.69888,10.40684 10.25399,1.2763 11.39565,1.04248 14.21034,-2.91038 z m 68.74867,57.41968 c -1.1172,-1.11822 9.90722,-18.4805 15.05377,-23.70808 1.80063,-1.82898 10.01821,-4.4857 13.91396,-4.49833 1.26075,-0.004 4.80213,-1.31565 7.86975,-2.91459 3.06761,-1.59893 8.73448,-3.16894 12.59303,-3.48892 6.72809,-0.55794 7.10272,-0.41321 9.14309,3.53244 l 2.12755,4.11423 -9.01284,9.04979 c -13.31667,13.37122 -20.32818,16.67089 -37.41599,17.60821 -7.60095,0.41693 -14.0235,0.55429 -14.27232,0.30525 z m 15.52278,-32.28854 c -0.992,-2.24108 -4.08804,-5.51678 -6.88008,-7.27931 -2.79202,-1.76253 -5.45469,-3.81667 -5.91701,-4.56472 -0.46233,-0.74805 -1.70487,-7.11744 -2.76119,-14.1542 -2.34104,-15.59488 -1.04582,-19.74337 6.54888,-20.97583 5.62914,-0.91348 17.70883,2.08891 26.13862,6.49672 7.03153,3.6767 17.61232,4.54094 23.86839,1.94959 2.14604,-0.88891 5.30885,-1.41701 7.02848,-1.17355 2.68382,0.37998 3.15733,1.2531 3.34369,6.16567 0.28557,7.52763 -2.12292,9.6538 -16.07791,14.19329 -15.22045,4.95115 -24.72189,10.87862 -28.57243,17.82488 -1.70494,3.07568 -3.50848,5.59215 -4.00785,5.59215 -0.49937,0 -1.71959,-1.83361 -2.71159,-4.07469 z M 589.24972,418.54921 c -2.54094,-3.56842 -2.80626,-5.12404 -1.98984,-11.66666 0.51812,-4.15208 0.89606,-8.98708 0.83987,-10.74447 -0.0561,-1.75739 0.43971,-3.85739 1.10201,-4.66667 0.66231,-0.80928 1.84694,-3.87641 2.63251,-6.81582 1.06877,-3.99909 2.58587,-5.96779 6.02677,-7.82084 3.09208,-1.6652 5.96386,-5.0382 8.7666,-10.29668 9.08352,-17.04244 16.6397,-21.20475 38.49468,-21.20475 12.17889,0 13.43081,0.25908 19.33009,4.0003 5.81602,3.68841 6.18329,4.23414 4.71092,7 -3.35912,6.31008 -7.20152,10.4411 -14.42386,15.50728 -4.11337,2.88537 -10.30331,9.09322 -13.7554,13.79525 -3.45209,4.70201 -8.84937,10.39678 -11.99395,12.65505 -3.14458,2.25827 -9.7188,8.06813 -14.60936,12.91081 -12.77834,12.6532 -19.8754,14.72807 -25.13104,7.3472 z M 452.00001,399.7206 c 0,-1.51795 2.67148,-7.2046 5.93663,-12.63701 6.79993,-11.31341 7.95873,-14.60064 10.01165,-28.40033 1.72132,-11.57062 2.69991,-13.06058 7.22419,-10.99918 6.95399,3.16846 6.08941,18.98932 -1.96109,35.88595 -5.34374,11.21558 -9.5638,15.57 -17.21674,17.76482 -3.51972,1.00944 -3.99464,0.81752 -3.99464,-1.61425 z m 90.00001,-27.56042 c -5.32447,-1.10064 -8.24167,-7.24484 -10.14119,-21.35938 -1.08456,-8.05894 -1.08547,-12.58538 -0.004,-16.9035 0.81283,-3.24352 2.15003,-8.57654 2.97156,-11.85116 0.82153,-3.27462 1.16743,-6.80408 0.76865,-7.84327 -1.08482,-2.82704 1.8763,-13.34235 4.18728,-14.86955 1.10971,-0.73333 4.76083,-2.84672 8.11363,-4.6964 8.70385,-4.8018 9.98976,-8.30544 9.76287,-26.6005 -0.18024,-14.53423 -0.0181,-15.52183 3.25118,-19.80813 4.79664,-6.28874 10.96736,-8.43783 26.51072,-9.23296 10.96476,-0.56092 14.30963,-0.26508 18.27439,1.61632 12.40327,5.88573 15.3714,35.65795 4.56685,45.8083 -3.3758,3.17141 -18.63228,10.39981 -23.45093,11.11088 -2.93211,0.43268 -3.20667,1.14305 -3.53104,9.13583 -0.25411,6.26149 0.21069,9.2992 1.67484,10.94589 5.69071,6.4002 2.53037,21.95337 -5.10332,25.11535 -7.46159,3.09069 -14.20264,9.06154 -18.28393,16.19489 -6.65722,11.63561 -11.49274,14.90671 -19.56822,13.23739 z m -113.70941,-3.3021 c -4.04184,-1.3241 -4.29812,-1.7426 -3.3554,-5.47918 1.15055,-4.56034 1.06468,-13.82347 -0.1393,-15.02747 -0.43578,-0.43576 -4.513,-1.30115 -9.0605,-1.92305 -5.18295,-0.70882 -9.31968,-2.11858 -11.08611,-3.77804 -1.54985,-1.45602 -6.96824,-5.49798 -12.04085,-8.98215 -5.07263,-3.48417 -9.1432,-6.93487 -9.04573,-7.6682 0.36014,-2.70975 11.5046,-7.33333 17.67586,-7.33333 9.69218,0 24.22046,4.54573 27.08169,8.47356 1.91382,2.62725 4.07426,3.54497 10.05853,4.2727 10.50257,1.27718 14.54813,3.6792 17.93389,10.64812 l 2.88863,5.94567 -5.26732,5.45855 c -5.07397,5.25817 -19.93989,17.39906 -20.83271,17.01392 -0.23904,-0.10307 -2.40384,-0.83262 -4.81068,-1.6211 z m -74.95727,-54.25337 c -5.38384,-3.60127 -7.18262,-6.21944 -10.13765,-14.75555 -0.40952,-1.18294 -3.54607,-3.5162 -6.97013,-5.18501 -11.70722,-5.70584 -19.92658,-16.49233 -18.39659,-24.14232 0.45084,-2.25418 0.10253,-4.16322 -0.87263,-4.78256 -0.89265,-0.56692 -11.12021,-1.04018 -22.72791,-1.05169 -23.50126,-0.0233 -23.27737,0.0612 -26.3872,-9.95933 -3.71469,-11.96956 -2.56358,-79.41503 1.50639,-88.26152 1.54521,-3.35869 6.35219,-6.12765 15.30444,-8.81583 3.25081,-0.97614 4.30592,-2.33158 5.72441,-7.35388 2.0054,-7.10028 7.32603,-12.24901 14.68417,-14.20977 8.16832,-2.17667 19.7584,-2.77935 27.22997,-1.41599 5.86677,1.07055 7.97412,2.2958 12.62073,7.338 3.06791,3.32907 5.76791,7.3692 6,8.97804 0.24342,1.68728 2.8707,4.5667 6.20826,6.80406 7.02593,4.70989 9.20177,9.38935 14.7701,31.76539 5.50258,22.11175 5.50592,22.07056 -1.8808,23.17827 -12.43316,1.86447 -16.35304,-0.43857 -26.39658,-15.50872 -5.72487,-8.59005 -9.77831,-12.57727 -13.7605,-13.53569 -4.22288,-1.01634 -7.62157,5.6834 -7.91248,15.5976 -0.12986,4.42481 -0.40309,14.64512 -0.60725,22.71178 l -0.37121,14.66667 4.51957,1.59141 c 2.48576,0.87527 6.46956,1.62527 8.85289,1.66667 3.22083,0.056 5.70258,1.44449 9.66667,5.40859 4.78992,4.78992 5.33333,6.00781 5.33333,11.95309 0,7.62831 1.92036,9.38024 10.2821,9.38024 3.95594,0 5.87877,-0.86007 8.43457,-3.77269 3.30103,-3.76192 3.30283,-3.77927 0.63024,-6.06782 -2.00151,-1.7139 -2.23636,-2.48218 -0.92741,-3.0338 0.96406,-0.40628 2.26422,-2.08376 2.88926,-3.72772 1.4433,-3.79614 9.87872,-7.919 16.30072,-7.96705 5.57206,-0.0417 10.7662,3.26537 14.15982,9.0154 2.21193,3.74785 2.19142,3.81312 -2.43596,7.75411 -2.56667,2.18594 -8.70479,5.8851 -13.64027,8.22034 -6.69612,3.16831 -8.98029,4.93199 -9,6.94921 -0.0145,1.48684 -0.84549,3.88684 -1.84663,5.33334 -2.7586,3.98586 -5.00092,19.51382 -4.0214,27.84802 0.60227,5.12439 0.3536,8.02848 -0.80724,9.42722 -2.66942,3.21645 -9.45006,2.35266 -16.0178,-2.04051 z m 77.81878,-75.4636 c -1.7946,-0.39073 -3.10468,-1.94925 -3.54219,-4.21392 -0.38185,-1.97662 -0.43356,-21.26812 -0.11493,-42.86998 0.78211,-53.01823 0.12347,-55.77017 -14.47999,-60.49898 -8.05345,-2.60783 -10.277,-4.11646 -13.60628,-9.23158 -2.04364,-3.13986 -2.12592,-3.99282 -0.56648,-5.8732 3.15153,-3.80016 10.10439,-5.81859 26.89423,-7.80746 21.41568,-2.53684 20.5686,-2.62106 23.67548,2.35401 2.37003,3.79514 2.59661,5.6581 1.82435,15 -0.48498,5.86666 -0.7882,32.92381 -0.67383,60.12699 0.16575,39.42298 -0.14757,49.7554 -1.54395,50.91428 -2.00229,1.66176 -13.61172,3.02622 -17.86645,2.09984 z m 81.83573,-26.79774 c -5.44764,-0.77424 -8.03064,-6.82327 -8.71453,-20.40827 -0.66388,-13.18711 1.45249,-25.337 4.96751,-28.51805 1.80541,-1.63387 6.92842,-2.57263 19.53884,-3.58036 19.91011,-1.59107 24.29969,-1.03481 28.67377,3.63357 3.03684,3.24117 3.20512,4.28313 3.06535,18.97959 -0.18463,19.41277 -2.10457,25.56676 -8.64155,27.69881 -4.72652,1.54157 -32.46897,3.10721 -38.88939,2.19471 z"
       id="path938" />
    <ellipse
       style="display:inline;opacity:0.85;fill:url(#radialGradient934);fill-opacity:1;stroke:#993333;stroke-width:0.52;stroke-linecap:round;stroke-linejoin:round"
       id="path295"
       cx="411.78134"
       cy="530.47388"
       rx="80.00502"
       ry="82.068573" />
  </g>
  <script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
</svg>
